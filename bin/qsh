#!/usr/bin/env python

# Copyright (c) 2008, Aldo Cortesi. All rights reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import os, os.path
from libqtile import confreader, sh, command

def main():
    from optparse import OptionParser, OptionGroup
    parser = OptionParser(version="%prog 0.2")
    parser.add_option(
                        "-c", "--config",
                        action="store", type="string",
                        default=None,
                        dest="configfile",
                        help='Use specified configuration file.'
                    )
    parser.add_option(
                        "-s", "--socket",
                        action="store", type="string",
                        default=None,
                        dest="socket",
                        help='Use specified comms socket.'
                    )
    options, args = parser.parse_args()

    try:
        c = confreader.File(options.configfile)
    except confreader.ConfigError, v:
        parser.error(v.message)
    client = command.Client(options.socket, c)
    qsh = sh.QSh(client)
    qsh.loop()


if __name__ == "__main__":
    main()


