#!/usr/bin/env python

# Copyright (c) 2008, Aldo Cortesi. All rights reserved.
# Copyright (c) 2011, Florian Mounier
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
Qtile session manager.
"""

from libqtile.log_utils import init_log
import logging
import os
import subprocess
import sys
import time
log = init_log(logging.DEBUG, 'qtile-session')
time_threshold = 5
restart_threshold = 3
restarts = 0

def launch_qtile(first=False):
    log.info('Launching qtile')
    rv = subprocess.call([
        sys.executable,
        os.path.join(os.path.dirname(os.path.abspath(__file__)), 'qtile')
    ] + sys.argv[1:] + (['--no-spawn'] if not first else []))
    log.info('Qtile exited with status %d' % rv)
    return rv
    

ret = launch_qtile(first=True)

start = time.time()
while restarts < restart_threshold and ret != 0:
    ret = launch_qtile()
    end = time.time()
    if end - start < time_threshold:
        log.warn('Restarted in %d seconds' % (end - start))
        restarts += 1
    else:
        log.info('Restarting')
        start = time.time()

if ret == 0:
        log.info('Shutting down')
else:
    log.error('Restarted %d times in less than %d seconds. Aborting' % (
        restart_threshold, time_threshold))

