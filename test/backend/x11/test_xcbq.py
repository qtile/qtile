import pytest
import xcffib
import xcffib.testing

from libqtile.backend.x11 import window, xcbq


def test_new_window(conn):
    win = conn.create_window(1, 2, 640, 480)
    assert isinstance(win, window.XWindow)
    geom = win.get_geometry()
    assert geom.x == 1
    assert geom.y == 2
    assert geom.width == 640
    assert geom.height == 480
    win.kill_client()
    with pytest.raises(xcffib.ConnectionException):
        win.get_geometry()


def test_masks():
    cfgmasks = xcbq.ConfigureMasks
    d = {"x": 1, "y": 2, "width": 640, "height": 480}
    mask, vals = cfgmasks(**d)
    assert set(vals) == set(d.values())
    with pytest.raises(ValueError):
        mask, vals = cfgmasks(asdf=32, **d)


def test_translate_masks():
    assert xcbq.translate_masks(["shift", "control"])
    assert xcbq.translate_masks([]) == 0


def test_edid_decoding():
    edid = b"\x00\xff\xff\xff\xff\xff\xff\x00L\x83\x9fA\x00\x00\x00\x00\x00!\x01\x04\xb5\x1e\x13x\x02\x0c\xf1\xaeR<\xb9#\x0cPT\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xca\xfe@d\xb0\x08\x18p \x08\x88\x00.\xbd\x10\x00\x00\x1b\xca\xfe@d\xb0\x088w\x08 \x88\x00.\xbd\x10\x00\x00\x1b\x00\x00\x00\xfe\x00SDC          \x00\x00\x00\xfe\x00ATNA40YK20-0 \x01\xcf\x02\x03\x0f\x00\xe3\x05\x80\x00\xe6\x06\x05\x01t`\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb7"

    (serial, name) = xcbq.parse_serial_from_edid(edid)
    assert serial == "ATNA40YK20-0 "
    assert name == "SDC          "
