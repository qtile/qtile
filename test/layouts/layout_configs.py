import functools
import sys

import libqtile
from libqtile.confreader import Config
from test.layouts import layout_utils

_MODULE = sys.modules[__name__]


# To allow pickling these autogenerated types, we need to have them accessible
# in module scope
def _expand_to_module(types):
    for key, value in types.items():
        setattr(_MODULE, key, value)


class AllLayoutsConfig(Config):
    """
    Ensure that all layouts behave consistently in some common scenarios.
    """
    groups = [
        libqtile.config.Group("a"),
        libqtile.config.Group("b"),
        libqtile.config.Group("c"),
        libqtile.config.Group("d"),
    ]
    follow_mouse_focus = False
    floating_layout = libqtile.resources.default_config.floating_layout
    screens = []


class AllLayoutsConfigEvents(AllLayoutsConfig):
    """
    Extends AllLayoutsConfig to test events.
    """
    def main(self, c):
        # TODO: Test more events

        c.test_data = {
            'focus_change': 0,
        }

        def handle_focus_change():
            c.test_data['focus_change'] += 1

        libqtile.hook.subscribe.focus_change(handle_focus_change)


class AllLayouts(AllLayoutsConfig):
    """
    Like AllLayoutsConfig, but all the layouts in the repo are installed
    together in the 'layouts' variable.
    """
    layouts = [
        layout_cls()
        for layout_name, layout_cls in layout_utils.iter_layouts()
    ]


def generate(prefix, config_cls, layouts):
    return {
        f'{prefix}__{layout_name}': type(
            f'{prefix}__{layout_name}',
            (config_cls, ),
            {
                'layouts': [layout_cls()],
            },
        )
        for layout_name, layout_cls in layouts
    }


# Generate a configuration for each layout currently in the repo.
# Each configuration has only the tested layout (i.e. 1 item) in the
# 'layouts' variable.
all_layouts_config = generate('all_layouts_config', AllLayoutsConfig, layout_utils.iter_layouts())
_expand_to_module(all_layouts_config)

all_layouts_config_events = generate('all_layouts_config_events', AllLayoutsConfigEvents, layout_utils.iter_layouts())
_expand_to_module(all_layouts_config_events)

# Generate a Slice configuration for each layout currently in the repo.
# Each layout is made a delegate/fallback layout of the Slice layout.
# Each configuration has only the tested layout (i.e. 1 item) in the
# 'layouts' variable.
all_delegate_layouts_config = generate(
    'all_delegate_layouts_config',
    AllLayoutsConfig,
    (
        (layout_name, functools.partial(
            libqtile.layout.slice.Slice,
            wname='nevermatch',
            fallback=layout_cls(),
        ),)
        for layout_name, layout_cls in layout_utils.iter_layouts()
    ),
)
_expand_to_module(all_delegate_layouts_config)
