[tox]
skip_missing_interpreters = True
skipsdist=True
minversion = 4.0.12
envlist =
    # Python environments with specific backend
    py{py3,39,310,311}-{x11,wayland}
    docs,
    pep8,
    codestyle,
    docstyle,
    mypy,
    packaging,
    vulture,
    # For running pytest locally
    test-{x11,wayland,both}

# Set up some variables that can be used multiple times
[base]
deps =
    setuptools >= 40.5.0
    dbus-next
    wheel
    cffi
    xcffib >= 1.4.0
    cairocffi >= 1.6.0
    # We use "!x11" here so pywayland is installed both in CI wayland environment
    # But also when users run locally (as both backends are run in that scenario)
    !x11: pywayland==0.4.15
    !x11: xkbcommon >= 0.3
testdeps = 
    pytest >= 6.2.1
    {wayland,x11}: coverage
    libcst >= 1.0.0
    PyGObject   
commands =
    !x11: pip install pywlroots==0.16.4
    pip install .
    !x11: {toxinidir}/scripts/ffibuild

# These are the environments that should be triggered by Github Actions
[testenv:py{py3,39,310,311}-{wayland,x11}]
# This is required in order to get UTF-8 output inside of the subprocesses
# that our tests use.
setenv = LC_CTYPE = en_US.UTF-8
# Pass Display down to have it for the tests available
passenv = DISPLAY,WAYLAND_DISPLAY,LDFLAGS,CFLAGS
allowlist_externals = 
    */ffibuild
    convert
deps =
    {[base]deps}
    {[base]testdeps}
# pywayland has to be installed before pywlroots
commands =
    {[base]commands}

    # pypy3 is very slow when running coverage reports so we skip it
    pypy3-x11: python3 -m pytest --backend=x11 {posargs}
    pypy3-wayland: python3 -m pytest --backend=wayland {posargs}
    py3{9,10,11}-x11: coverage run -m pytest --backend=x11 {posargs}
    py3{9,10,11}-wayland: coverage run -m pytest --backend=wayland {posargs}

    # Coverage is only run via GithubActions
    # Coverage runs tests in parallel so we need to combine results into a single file
    !pypy3-{wayland,x11}: coverage combine -q
    # Include a text summary in the build log
    !pypy3-{wayland,x11}: coverage report -m
    # Create an xml summary to be submitted to coveralls.io
    !pypy3-{wayland,x11}: coverage xml

# Basic environment for local testing
[testenv:test]
# This is required in order to get UTF-8 output inside of the subprocesses
# that our tests use.
setenv = LC_CTYPE = en_US.UTF-8
# Pass Display down to have it for the tests available
passenv = DISPLAY,WAYLAND_DISPLAY,LDFLAGS,CFLAGS
allowlist_externals = 
    */ffibuild
    convert
deps =
    {[base]deps}
    {[base]testdeps}
# pywayland has to be installed before pywlroots
commands =
    {[base]commands}
    python -m pytest {posargs}

# Additional local environments with specified backends
[testenv:test-{x11,wayland,both}]
# This is required in order to get UTF-8 output inside of the subprocesses
# that our tests use.
setenv = LC_CTYPE = en_US.UTF-8
# Pass Display down to have it for the tests available
passenv = DISPLAY,WAYLAND_DISPLAY,LDFLAGS,CFLAGS
allowlist_externals = 
    */ffibuild
    convert
deps =
    {[base]deps}
    {[base]testdeps}
# pywayland has to be installed before pywlroots
commands =
    {[base]commands}
    x11: python -m pytest --backend=x11 {posargs}
    wayland: python -m pytest --backend=wayland {posargs}
    both: python -m pytest --backend=wayland --backend=x11 {posargs}

[testenv:packaging]
deps =
    check-manifest
    twine
    build
commands =
    check-manifest
    python3 -m build --sdist .
    twine check dist/*

[testenv:pep8]
deps =
    flake8
    flake8-black>=0.2.4
    flake8-isort
    flake8-tidy-imports
    flake8-logging-format
    pep8-naming
commands =
    flake8 {toxinidir}/libqtile {toxinidir}/bin/ {toxinidir}/test {toxinidir}/docs {toxinidir}/setup.py --exclude=test/configs/syntaxerr.py,**/_ffi*.py,docs/_build/

[testenv:codestyle]
deps =
    pycodestyle >= 2.7
skip_install = true
commands =
    pycodestyle --max-line-length=98 --exclude="_*.py" --ignore=E203,E501,W503 {toxinidir}/libqtile

[testenv:docstyle]
deps =
    pydocstyle >= 5.0
skip_install = true
commands =
    - pydocstyle --match "(?!(test)?_).*\.py" libqtile/

[testenv:mypy]
allowlist_externals=*/ffibuild
deps =
    {[base]deps}
    mypy == 1.4.1
    libcst >= 1.0.0
    pytest >= 6.2.1
    types-python-dateutil
    types-pytz
    types-pkg_resources
    xkbcommon>=0.3
commands =
    {[base]commands}
    mypy -p libqtile
    # also run the tests that require mypy
    python3 -m pytest -- test/test_check.py test/migrate/test_check_migrations.py

[testenv:docs]
deps = -r{toxinidir}/docs/requirements.txt
commands = 
    pip install -r{toxinidir}/requirements.txt
    python3 setup.py build_sphinx -W

[testenv:vulture]
deps =
    vulture
commands =
    vulture --min-confidence=100 --exclude test/configs/syntaxerr.py libqtile test

[gh-actions]
python =
    pypy-3.9: pypy3
    3.9: py39, mypy
    3.10: py310, mypy
    3.11: py311, mypy, packaging, pep8, codestyle, docstyle, vulture

[gh-actions:env]
BACKEND =
    x11: x11
    wayland: wayland
